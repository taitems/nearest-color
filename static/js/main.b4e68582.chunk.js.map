{"version":3,"sources":["defaultColors.js","App.js","serviceWorker.js","index.js"],"names":["red50","red100","red200","red300","red400","red500","red600","red700","red800","red900","orange50","orange100","orange200","orange300","orange400","orange500","orange600","orange700","orange800","orange900","yellow50","yellow100","yellow200","yellow300","yellow400","yellow500","yellow600","yellow700","yellow800","yellow900","green50","green100","green200","green300","green400","green500","green600","green700","green800","green900","blue50","blue100","blue200","blue300","blue400","blue500","blue600","blue700","blue800","blue900","indigo50","indigo100","indigo200","indigo300","indigo400","indigo500","indigo600","indigo700","indigo800","indigo900","purple50","purple100","purple200","purple300","purple400","purple500","purple600","purple700","purple800","purple900","lightGrey100","lightGrey200","lightGrey300","lightGrey400","lightGrey500","lightGrey600","lightGrey700","lightGrey800","lightGrey900","darkGrey50","darkGrey100","darkGrey200","darkGrey300","darkGrey400","darkGrey500","darkGrey600","darkGrey700","darkGrey800","darkGrey900","navy100","navy200","navy300","navy400","navy500","navy600","navy700","navy800","navy900","App","obj","useState","defaultColors","list","color","setColor","match","setMatch","nearestColor","require","from","ThemeProvider","CSSReset","Flex","Box","flex","p","Text","Input","type","onChange","e","localColor","target","value","test","newColor","bg","height","width","isReadOnly","name","rgb","r","g","b","distance","Textarea","JSON","stringify","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAAeaAAc,UACdC,aAAc,UACdC,aAAc,UACdC,aAAc,UACdC,aAAc,UACdC,aAAc,UACdC,aAAc,UACdC,aAAc,UACdC,aAAc,UAEdC,WAAY,UACZC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UAEbC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,WC7CEC,MA3Df,WAAgB,IAqBEC,EArBH,EAEWC,mBAASC,GAFpB,mBAENC,EAFM,aAGaF,sBAHb,mBAGNG,EAHM,KAGCC,EAHD,OAIaJ,mBAAS,IAJtB,mBAINK,EAJM,KAICC,EAJD,KAMTC,EAAeC,EAAQ,IAAiBC,KAAKP,GAmBjD,OACE,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,KAAM,EAAGC,EAAG,GACf,kBAACF,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,SApBZ,SAAAC,GACf,IAAMC,EAAaD,EAAEE,OAAOC,MAE5B,GADAnB,EAASiB,GALF,kBAAkBG,KAMfH,GAAa,CACrB,IAAMI,EAAWlB,EAAac,GAC9Bf,EAASmB,QAiBL,kBAACZ,EAAA,EAAD,CACEa,GAAIvB,EACJwB,OAAQ,IACRC,MAAM,UAGV,kBAACf,EAAA,EAAD,CAAKC,KAAM,EAAGC,EAAG,GACf,kBAACC,EAAA,EAAD,sBACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOK,MAAOlB,EAAMkB,MAAOM,YAAU,IACjD,kBAAChB,EAAA,EAAD,CACEa,GAAIrB,EAAMkB,MACVI,OAAQ,IACRC,MAAM,SAER,kBAACf,EAAA,EAAD,aAAWR,EAAMkB,OACjB,kBAACV,EAAA,EAAD,eAAaR,EAAMyB,MACnB,kBAACjB,EAAA,EAAD,cA7BQd,EA6BWM,EAAM0B,KA5BrB,cAAUhC,EAAIiC,EAAd,YAAmBjC,EAAIkC,EAAvB,YAA4BlC,EAAImC,EAAhC,KAAuC,MA6B3C,kBAACrB,EAAA,EAAD,kBAAgBR,EAAM8B,YAG1B,kBAACC,EAAA,EAAD,CAAUb,MAAOc,KAAKC,UAAUpC,GAAO2B,YAAU,MC9CnCU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrC,MACvB,2DCZNsC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b4e68582.chunk.js","sourcesContent":["export default {\n    // red\n    red50: '#FFF3F8',\n    red100: '#FFE3EE',\n    red200: '#FFC5DC',\n    red300: '#FFA2C8',\n    red400: '#FF73AC',\n    red500: '#FF4591',\n    red600: '#FF2D82',\n    red700: '#FF1675',\n    red800: '#DF005B',\n    red900: '#CF0758',\n    // orange\n    orange50: '#FFF9F3',\n    orange100: '#FEF1E3',\n    orange200: '#FEE2C4',\n    orange300: '#FED0A1',\n    orange400: '#FEB973',\n    orange500: '#FDA144',\n    orange600: '#FD952C',\n    orange700: '#FD8A15',\n    orange800: '#EB7701',\n    orange900: '#DD6F00',\n    // yellow\n    yellow50: '#FFFCF6',\n    yellow100: '#FFF8E8',\n    yellow200: '#FFF1D0',\n    yellow300: '#FFE9B5',\n    yellow400: '#FFDD8F',\n    yellow500: '#FFD574',\n    yellow600: '#FFCF61',\n    yellow700: '#FFC745',\n    yellow800: '#F1B730',\n    yellow900: '#ECAC16',\n    // green\n    green50: '#F2FDF9',\n    green100: '#E0FBF0',\n    green200: '#C0F7E1',\n    green300: '#9AF3CF',\n    green400: '#67ECB8',\n    green500: '#35E6A0',\n    green600: '#1BE393',\n    green700: '#02E088',\n    green800: '#02C97A',\n    green900: '#00BA70',\n    // blue\n    blue50: '#F6F9FF',\n    blue100: '#E8EFFF',\n    blue200: '#D0DFFF',\n    blue300: '#B3CBFF',\n    blue400: '#8EB2FF',\n    blue500: '#6898FF',\n    blue600: '#548AFF',\n    blue700: '#427EFF',\n    blue800: '#3068E1',\n    blue900: '#2556C0',\n    // indigo\n    indigo50: '#F4F4F9',\n    indigo100: '#E5E4EF',\n    indigo200: '#C9C7DE',\n    indigo300: '#A8A5CB',\n    indigo400: '#7D78B1',\n    indigo500: '#514B97',\n    indigo600: '#3B348A',\n    indigo700: '#261E7D',\n    indigo800: '#1B145D',\n    indigo900: '#130E46',\n    // purple\n    purple50: '#FBF6FF',\n    purple100: '#F6E9FF',\n    purple200: '#ECD2FF',\n    purple300: '#E1B7FF',\n    purple400: '#D294FF',\n    purple500: '#C370FF',\n    purple600: '#BB5DFF',\n    purple700: '#B44CFF',\n    purple800: '#9E3DE5',\n    purple900: '#832DC1',\n    // light-grey\n    lightGrey100: '#F9FBFD',\n    lightGrey200: '#F7F9FC',\n    lightGrey300: '#F3F5FA',\n    lightGrey400: '#EDF1F8',\n    lightGrey500: '#E7ECF7',\n    lightGrey600: '#DFE6F4',\n    lightGrey700: '#D7E0F1',\n    lightGrey800: '#CAD6EB',\n    lightGrey900: '#BFCCE3',\n    // dark-grey\n    darkGrey50: '#ADBAD0',\n    darkGrey100: '#A2B0C9',\n    darkGrey200: '#95A5C2',\n    darkGrey300: '#8596B7',\n    darkGrey400: '#7688AE',\n    darkGrey500: '#6B7FA6',\n    darkGrey600: '#6478A2',\n    darkGrey700: '#4A5D85',\n    darkGrey800: '#344468',\n    darkGrey900: '#243252',\n    // navy\n    navy100: '#E1E0E9',\n    navy200: '#C1C0D1',\n    navy300: '#9C9AB6',\n    navy400: '#6B6791',\n    navy500: '#353069',\n    navy600: '#201B5A',\n    navy700: '#080248',\n    navy800: '#050035',\n    navy900: '#03001E',\n}\n","import React, { useState } from 'react';\nimport { ThemeProvider, CSSReset, Textarea, Input, Flex, Box, Text } from \"@chakra-ui/core\";\nimport defaultColors from './defaultColors';\n\nfunction App() {\n\n  const [list, setList] = useState(defaultColors);\n  const [color, setColor] = useState();\n  const [match, setMatch] = useState({});\n\n  var nearestColor = require('nearest-color').from(list);\n\n  const isHex = str => {\n    return /^#[A-F0-9]{6}$/i.test(str)\n  }\n\n  const onChange = e => {\n    const localColor = e.target.value;\n    setColor(localColor);\n    if (isHex(localColor)) {\n      const newColor = nearestColor(localColor);\n      setMatch(newColor);\n    }\n  }\n\n  const makeRgb = obj => {\n    return obj ? `rgb(${obj.r},${obj.g},${obj.b})` : null;\n  }\n\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <Flex>\n        <Box flex={1} p={2}>\n          <Box>\n            <Text>Input</Text>\n            <Input type=\"text\" onChange={onChange} />\n          </Box>\n          <Box\n            bg={color}\n            height={100}\n            width=\"100%\"\n          />\n        </Box>\n        <Box flex={1} p={2}>\n          <Text>Nearest Color</Text>\n          <Input type=\"text\" value={match.value} isReadOnly />\n          <Box\n            bg={match.value}\n            height={100}\n            width=\"100%\"\n          />\n          <Box>Hex: {match.value}</Box>\n          <Box>Match: {match.name}</Box>\n          <Box>RGB: {makeRgb(match.rgb)}</Box>\n          <Box>Distance: {match.distance}</Box>\n        </Box>\n      </Flex>\n      <Textarea value={JSON.stringify(list)} isReadOnly />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}